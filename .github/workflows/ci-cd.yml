name: 'reusable CI/CD workflow'

on:
  workflow_call:
    inputs:
      github-ref-name:
        description: 'The GitHub ref'
        required: true
        type: string
      sonar-key:
        description: 'The key of the Sonar project to analyze'
        required: true
        type: string
      sonar-additional-params:
        description: 'Any additional parameters for the .NET Sonar scan'
        type: string
        default: '/d:sonar.cs.opencover.reportsPaths=Tests/coverage.opencover.xml /s:$GITHUB_WORKSPACE/SonarQube.Analysis.xml'
      dotnet-test-additional-params-unit-integration-tests:
        description: 'Any additional parameters for the .NET unit and integration test run'
        type: string
      docker-publish-mode:
        description: 'Whether to publish chiseled Docker images'
        type: string
        default: none
      docker-publish-project:
        description: 'The .NET project path to publish via .NET SDK Container Building Tools'
        type: string
      requires-docker-login:
        description: 'Whether this workflow must access Docker'
        type: boolean
        default: false

    secrets:
      sonar-token:
        description: 'The Sonar token'
        required: true

    outputs:
      release-version:
        description: 'The release version'
        value: ${{ jobs.ci_cd.outputs.release-version }}
      is-release:
        description: 'Whether this is a release (i.e. with a Git tag) or not'
        value: ${{ jobs.ci_cd.outputs.is-release }}

env:
  DOTNET_CLI_TELEMETRY_OPTOUT: 1

jobs:
  ci_cd:
    runs-on: ubuntu-latest

    outputs:
      release-version: ${{ steps.determine-release-information.outputs.release_version }}
      is-release: ${{ steps.determine-release-information.outputs.is_release }}

    steps:
      - name: Validate input
        run: |
          DOCKER_PUBLISH_MODE=${{ inputs.docker-publish-mode }}
          if [[ $DOCKER_PUBLISH_MODE != "none" && $DOCKER_PUBLISH_MODE != "regular" && $DOCKER_PUBLISH_MODE != "regular_and_chiseled" && $DOCKER_PUBLISH_MODE != "regular_and_chiseled_extra" && $DOCKER_PUBLISH_MODE != "chiseled" && $DOCKER_PUBLISH_MODE != "chiseled_extra" ]]; then
            exit 1
          fi

      - name: Check out code
        uses: actions/checkout@v5

      - name: Set up .NET
        uses: actions/setup-dotnet@v5

      - name: Set up JDK
        uses: actions/setup-java@v5
        with:
          java-version: 21
          distribution: microsoft

      - name: Login to Container registry
        if: inputs.requires-docker-login == true
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Restore .NET tools
        run: dotnet tool restore

      - name: Restore NuGet dependencies
        run: dotnet restore --locked-mode

      - name: Restore SonarQube packages from cache
        uses: actions/cache@v4
        with:
          key: sonar-${{ runner.os }}
          path: ~/.sonar/cache

      - name: Begin SonarQube scan for .NET
        env:
          ENV_SONAR_TOKEN: ${{ secrets.sonar-token }}
        run: dotnet tool run dotnet-sonarscanner begin /k:${{ inputs.sonar-key }} /o:mu88 /d:sonar.token=${{ env.ENV_SONAR_TOKEN }} ${{ inputs.sonar-additional-params }}

      - name: .NET Build
        run: dotnet build --no-restore

      - name: Run .NET unit and integration tests and collect coverage
        run: dotnet test --no-build /p:CollectCoverage=true /p:CoverletOutputFormat=opencover --filter 'TestCategory=Unit|TestCategory=Integration' ${{ inputs.dotnet-test-additional-params-unit-integration-tests }}

      - name: End SonarQube scan for .NET
        env:
          ENV_SONAR_TOKEN: ${{ secrets.sonar-token }}
        run: dotnet tool run dotnet-sonarscanner end /d:sonar.token=${{ env.ENV_SONAR_TOKEN }}

      - name: Run .NET performance tests
        run: dotnet test --no-build --filter 'TestCategory=Performance'

      - name: Run .NET system tests
        run: dotnet test --no-build --filter 'TestCategory=System'

      - name: Determine release information
        id: determine-release-information
        run: |
          if [[ '${{ inputs.github-ref-name }}' =~ ^refs\/tags\/v?(.*)$ ]]; then
            VERSION=${BASH_REMATCH[1]}
            IS_RELEASE=true
          else
            VERSION=dev
            IS_RELEASE=false
          fi

          echo "release_version=$VERSION" >> $GITHUB_OUTPUT
          echo "is_release=$IS_RELEASE" >> $GITHUB_OUTPUT

      - name: Build and push Docker
        if: ${{ inputs.docker-publish-mode != 'none' }}
        run: |
          IS_RELEASE=${{ steps.determine-release-information.outputs.is_release }}
          VERSION=${{ steps.determine-release-information.outputs.release_version }}
          DOCKER_PUBLISH_MODE=${{ inputs.docker-publish-mode }}

          if [[ $DOCKER_PUBLISH_MODE == *"chiseled"* ]]; then
            CHISELED_SUFFX="-chiseled"
            CONTAINER_FAMILY="-noble-chiseled"
            if [[ $DOCKER_PUBLISH_MODE == *"extra"* ]]; then
              CONTAINER_FAMILY="$CONTAINER_FAMILY-extra"
            fi
          else
            CHISELED_SUFFX=""
            CONTAINER_FAMILY=""
          fi

          echo "CHISELED_SUFFX: $CHISELED_SUFFX"
          echo "Container family: $CONTAINER_FAMILY"

          if [[ $DOCKER_PUBLISH_MODE == *"regular"* ]]; then
            if [[ $IS_RELEASE == true ]]; then
              TAGS="$VERSION;latest"
            else
              TAGS="$VERSION"
            fi
            
            echo "Tags: $TAGS"

            dotnet publish ${{ inputs.docker-publish-project }} --no-restore /t:PublishContainer -p:ContainerImageTags=\"$TAGS\" -p:ContainerRegistry=ghcr.io
          fi

          if [[ $DOCKER_PUBLISH_MODE == *"chiseled"* ]]; then
            CURRENT_BASE_IMAGE=$(dotnet msbuild ${{ inputs.docker-publish-project }} -getProperty:ContainerBaseImage)
            BASE_IMAGE="$CURRENT_BASE_IMAGE$CONTAINER_FAMILY"

            if [[ $IS_RELEASE == true ]]; then
              TAGS="$VERSION$CHISELED_SUFFX;latest$CHISELED_SUFFX"
            else
              TAGS="$VERSION$CHISELED_SUFFX"
            fi

            echo "Tags: $TAGS"
            echo "BASE_IMAGE: $BASE_IMAGE"

            dotnet publish ${{ inputs.docker-publish-project }} --no-restore /t:PublishContainer -p:ContainerImageTags=\"$TAGS\" -p:ContainerBaseImage=\"$BASE_IMAGE\" -p:ContainerRegistry=ghcr.io
          fi
