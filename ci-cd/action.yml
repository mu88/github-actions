name: 'CI/CD'

inputs:
  github-ref-name:
    description: 'The GitHub ref'
    required: true
    type: string
  sonar-key:
    description: 'The key of the Sonar project to analyze'
    required: true
    type: string
  sonar-token:
    description: 'The Sonar token'
    required: true
    type: string
  sonar-additional-params:
    description: 'Any additional parameters for the .NET Sonar scan'
    type: string
    default: '/d:sonar.cs.opencover.reportsPaths=Tests/coverage.opencover.xml /s:$GITHUB_WORKSPACE/SonarQube.Analysis.xml'
  dotnet-test-additional-params-unit-integration-tests:
    description: 'Any additional parameters for the .NET unit and integration test run'
    type: string
  docker-publish-mode:
    description: 'Whether to publish chiseled Docker images'
    type: choice
    options:
      - none
      - regular
      - regular_and_chiseled
      - regular_and_chiseled_extra
      - chiseled
      - chiseled_extra
    default: none
  docker-publish-project:
    description: 'The .NET project path to publish via .NET SDK Container Building Tools'
    type: string
  docker-username:
    description: 'The Docker Hub username'
    type: string
  docker-token:
    description: 'The token to access Docker Hub'
    type: string

outputs:
  is-release:
    description: 'Whether this is a release (i.e. with a Git tag) or not'
    value: ${{ steps.determine-release-information.outputs.is-release }}
  release-version:
    description: 'The release version'
    value: ${{ steps.determine-release-information.outputs.release-version }}

runs:
  using: 'composite'
  steps:
    - name: Set up .NET
      uses: actions/setup-dotnet@v4
    - name: Set up JDK
      uses: actions/setup-java@v4
      with:
        java-version: 17
        distribution: 'zulu'
    - name: Login to DockerHub
      uses: docker/login-action@v3
      if: ${{ inputs.docker-username != '' && inputs.docker-token != '' }}
      with:
        registry: registry.hub.docker.com
        username: ${{ inputs.docker-username }}
        password: ${{ inputs.docker-token }}
    - name: Restore .NET tools
      shell: bash
      run: dotnet tool restore
    - name: Restore NuGet dependencies
      shell: bash
      run: dotnet restore
    - name: Begin Sonar scan for .NET
      shell: bash
      run: dotnet tool run dotnet-sonarscanner begin /k:${{ inputs.sonar-key }} /o:mu88 /d:sonar.token=${{ inputs.sonar-token }} ${{ inputs.sonar-additional-params }}
    - name: .NET Build
      shell: bash
      run: dotnet build --no-restore
    - name: Run .NET unit and integration tests and collect coverage
      shell: bash
      run: dotnet test --no-build /p:CollectCoverage=true /p:CoverletOutputFormat=opencover --filter 'TestCategory=Unit|TestCategory=Integration' ${{ inputs.dotnet-test-additional-params-unit-integration-tests }}
    - name: End Sonar scan for .NET
      shell: bash
      run: dotnet tool run dotnet-sonarscanner end /d:sonar.token=${{ inputs.sonar-token }}
    - name: Run .NET system tests
      shell: bash
      run: dotnet test --no-build --filter 'TestCategory=System'
    - name: Determine release information
      id: determine-release-information
      shell: bash
      run: |
        if [[ '${{ inputs.github-ref-name }}' =~ ^refs\/tags\/v?(.*)$ ]]; then
          VERSION=${BASH_REMATCH[1]}
          IS_RELEASE=true
        else
          VERSION=dev
          IS_RELEASE=false
        fi
        echo 'release-version=$VERSION;is-release=$IS_RELEASE' >> $GITHUB_OUTPUT
        echo "VERSION=$VERSION;IS_RELEASE=$IS_RELEASE" >> $GITHUB_ENV
    - name: Build and push Docker
      if: ${{ inputs.docker-publish-mode != 'none' }}
      shell: bash
      run: |
        IS_RELEASE=${{ env.IS_RELEASE }}
        VERSION=${{ env.VERSION }}
        DOCKER_PUBLISH_MODE=${{ inputs.docker-publish-mode }}

        if [[ $DOCKER_PUBLISH_MODE == *"chiseled"* ]]; then
          CHISELED_SUFFX="-chiseled"
          CONTAINER_FAMILY="-noble-chiseled"

          if [[ $DOCKER_PUBLISH_MODE == *"extra"* ]]; then
            CONTAINER_FAMILY="${CONTAINER_FAMILY}-extra"
          fi
        else
          CHISELED_SUFFX=""
          CONTAINER_FAMILY=""
        fi

        echo "Tags: ${TAGS}"
        echo "Container family: ${CONTAINER_FAMILY}"

        if [[ $DOCKER_PUBLISH_MODE == *"regular"* ]]; then
          if [[ $IS_RELEASE == true ]]; then
            TAGS="${VERSION};latest"
          else
            TAGS="${VERSION}"
          fi
          echo "Tags: ${TAGS}"

          dotnet publish ${{ inputs.docker-publish-project }} /t:MultiArchPublish '-p:ContainerImageTags='${TAGS}'' -p:ContainerRegistry=registry.hub.docker.com
        fi

        if [[ $DOCKER_PUBLISH_MODE == *"chiseled"* ]]; then
          if [[ $IS_RELEASE == true ]]; then
            TAGS="${VERSION}${CHISELED_SUFFX};latest${CHISELED_SUFFX}"
          else
            TAGS="${VERSION}${CHISELED_SUFFX}"
          fi
          echo "Tags: ${TAGS}"

          CURRENT_BASE_IMAGE=$(dotnet msbuild ${{ inputs.docker-publish-project }} -getProperty:ContainerBaseImage)
          BASE_IMAGE="${CURRENT_BASE_IMAGE}${CONTAINER_FAMILY}"
          dotnet publish ${{ inputs.docker-publish-project }} /t:MultiArchPublish '-p:ContainerImageTags='${TAGS}'' '-p:ContainerBaseImage='${BASE_IMAGE}'' -p:ContainerRegistry=registry.hub.docker.com
        fi
